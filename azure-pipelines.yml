trigger:
  batch: true
  branches:
    include:
      - cccs-main

variables:
  containerRegistry: uchimera
  m2RepoNodePath: /datadisks/disk1/.m2/repository
  m2RepoContainerPath: /tmp/m2/repository

jobs:
  - job: PrepareNode
    displayName: Prepare the node for the Container Build
    pool: cauldron-vmss
    steps:
      - checkout: none
      - bash: |
          mkdir -p ${{ variables.m2RepoNodePath }}
        displayName: Create required directories

  - job: BuildAndPushRedHatImage
    displayName: Pull RedHat image and push it to UChimera
    pool:
      vmImage: ubuntu-latest
    steps:
      - task: Bash@3
        name: CreateRedHatJDKImage
        displayName: Docker build - Red Hat and JDK image
        inputs:
          targetType: 'inline'
          script: |
            cd $(Build.SourcesDirectory)/core/docker
            chmod g+w ${HOME}
            chmod ug+x ./build.sh
            ./build.sh -a amd64 -t $(Build.BuildId)
            if [ $? -ne 0 ]; then
            echo "Docker build failed"
            exit 1
            fi
      - task: Docker@2
        displayName: Login to ${{ variables.containerRegistry }}
        inputs:
          command: login
          containerRegistry: ${{ variables.containerRegistry }}
      - task: Docker@2
        displayName: Push RedHat image to ${{ variables.containerRegistry }}
        inputs:
          command: push
          containerRegistry: ${{ variables.containerRegistry }}
          repository: cccs/ubi-minimal-jdk
          tags: $(Build.BuildId)-amd64
      - task: Docker@2
        displayName: Logout of ${{ variables.containerRegistry }}
        inputs:
          command: logout
          containerRegistry: ${{ variables.containerRegistry }}
        condition: always()

  - job: ContainerBuild
    dependsOn:
      - PrepareNode
      - BuildAndPushRedHatImage
    displayName: Maven Build (Container)
    pool: cauldron-vmss
    variables:
      containerRegistry: uchimera
      imageRepository: cccs/trino-base
      buildTimestamp: $[format('{0:yyyyMMddHHmmss}', pipeline.startTime)]
      JAVA_TOOL_OPTIONS: " -Xmx8g"
      DOCKER_BUILDKIT: 1
    container:
      image: uchimera.azurecr.io/cccs/dev/projector-intellij-ce:trino_20240328204745_b9712
      options: --entrypoint="" --user=0
      endpoint: uchimera
      volumes:
        - "${{ variables.m2RepoNodePath }}:${{ variables.m2RepoContainerPath }}"
    steps:
      - task: DownloadSecureFile@1
        name: cccs_stratus_m2_settings
        displayName: "Download settings.xml"
        inputs:
          secureFile: "cccs-stratus-m2-settings.xml"
      - task: Bash@3
        name: move_settings_to_m2
        displayName: "Move settings to .m2"
        inputs:
          targetType: "inline"
          script: |
            mkdir -p "${HOME}/.m2"
            cp "$(cccs_stratus_m2_settings.secureFilePath)" "${HOME}/.m2/settings.xml"
      - task: MavenAuthenticate@0
        inputs:
          artifactsFeeds: cccs-stratus
      - task: Bash@3
        name: setBranchName
        inputs:
          targetType: 'inline'
          script: |
            BRANCH_NAME=$(echo "$SYSTEM_PULLREQUEST_SOURCEBRANCH $BUILD_SOURCEBRANCH" | sed -r 's/^\s*(refs\/heads\/)?(\S*).*$/\2/' | sed 's/\//_/g')
            echo "##vso[task.setvariable variable=BRANCH_NAME]$BRANCH_NAME"
        displayName: Parse Source Control Branch Name
      - task: Bash@3
        name: BuildTrino
        displayName: Maven build
        inputs:
          targetType: 'inline'
          script: |
            $(Build.SourcesDirectory)/mvnw clean install -e -DskipTests -pl '!:trino-docs' -Dmaven.repo.local=${{ variables.m2RepoContainerPath }}
      - task: Docker@2
        displayName: Login to ${{ variables.containerRegistry }}
        inputs:
          command: login
          containerRegistry: ${{ variables.containerRegistry }}
      - task: Bash@3
        name: CreateTrinoDockerFile
        displayName: Create Temp docker file
        inputs:
          targetType: 'inline'
          script: |
            cd $(Build.SourcesDirectory)/core/docker
            chmod g+w ${HOME}
            chmod ug+x ./build-trino-base.sh
            ./build-trino-base.sh -a amd64 -t $(Build.BuildId)
            if [ $? -ne 0 ]; then
            echo "Docker build failed"
            exit 1
            fi
            TRINO_VERSION=$("$(Build.SourcesDirectory)/mvnw" -f "$(Build.SourcesDirectory)/pom.xml" --quiet help:evaluate -Dexpression=project.version -DforceStdout)
            DOCKERFILE="FROM trino:${TRINO_VERSION}-amd64
            LABEL cccs.trino.upstream.version=${TRINO_VERSION}"
            DOCKERFILE_PATH=$(mktemp -d)/Dockerfile
            echo "${DOCKERFILE}" > "${DOCKERFILE_PATH}"
            echo "##vso[task.setvariable variable=DOCKERFILE_PATH]$DOCKERFILE_PATH"
            echo "DOCKERFILE:"
            echo "${DOCKERFILE}"
      - task: Docker@2
        displayName: Finalize, tag and push image to ${{ variables.containerRegistry }}
        inputs:
          command: buildAndPush
          containerRegistry: ${{ variables.containerRegistry }}
          repository: ${{ variables.imageRepository }}
          Dockerfile: $(DOCKERFILE_PATH)
          tags: |
            $(BRANCH_NAME)
            $(BRANCH_NAME)_$(buildTimestamp)_b$(Build.BuildId)
      - task: Docker@2
        displayName: Logout of ${{ variables.containerRegistry }}
        inputs:
          command: logout
          containerRegistry: ${{ variables.containerRegistry }}
        condition: always()
